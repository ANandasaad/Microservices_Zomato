// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  RESTAURANT_OWNER
  DELIVERY_PARTNER
  ADMIN
}

enum DietaryType {
  VEG
  NON_VEG
  null
}

enum AuthProvider {
  EMAIL
  PHONE
  GOOGLE
  FACEBOOK
  APPLE
}

// Enums
enum RestaurantType {
  FINE_DINING
  CAFE
  QUICK_SERVICE
  CLOUD_KITCHEN
}

enum VehicleType {
  BIKE
  SCOOTER
  BICYCLE
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum DocumentType {
  FSSAI_LICENSE
  GST_CERTIFICATE
  RESTAURANT_REGISTRATION
  OWNER_ID
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum OtpType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
  null
}

enum OtpStatus {
  pending
  verified
}

model User {
  id                     Int                      @id @default(autoincrement())
  email                  String?                  @unique
  phone                  String?                  @unique
  password               String?
  firstName              String?
  lastName               String?
  profileImage           String?
  dateOfBirth            DateTime?
  isActive               Boolean                  @default(true)
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  version                Int                      @default(1)
  role                   Role                     @default(CUSTOMER)
  isEmailVerified        Boolean                  @default(false)
  isPhoneVerified        Boolean                  @default(false)
  failedLoginAttempts    Int                      @default(0)
  accountLockedUntil     DateTime?
  provider               String?
  // role specific fields
  restaurantId           String?
  vehicleType            String?
  Session                Session[]
  Otp                    Otp?
  CustomerProfile        CustomerProfile[]
  DeviceToken            DeviceToken[]
  DeliveryPartnerProfile DeliveryPartnerProfile[]
  RestaurantProfile      RestaurantProfile[]
  SocialProvider         SocialProvider[]

  // indexs for faster lookups
  @@unique([email, isActive], name: "idx_users_active_email")
  @@unique([phone, isActive], name: "idx_users_active_phone")
  @@index([email])
  @@index([phone])
}

model SocialProvider {
  id           Int          @id @default(autoincrement())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerName AuthProvider @default(PHONE)
  providerID   String?      @unique
  lastLogin    DateTime     @default(now())
  userId       Int
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
}

model Address {
  id                Int             @id @default(autoincrement())
  type              AddressType
  streetAddress     String
  city              String
  state             String
  pinCode           String
  customer          CustomerProfile @relation(fields: [customerProfileId], references: [id])
  latitude          Float?
  longitude         Float?
  isDefault         Boolean         @default(false)
  customerProfileId Int
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
}

model Session {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceInfo Json
  ip         String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  userId     Int

  @@index([expiresAt])
}

model DeviceToken {
  id          Int      @id @default(autoincrement())
  deviceToken String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Otp {
  id           Int       @id @default(autoincrement())
  otp          String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  userId       Int       @unique
  otpType      OtpType   @default(null)
  attemptCount Int       @default(0) // Track the number of attempts  
  lockUntil    DateTime?
  status       OtpStatus @default(pending)

  @@index([expiresAt])
  @@index([userId])
}

model CustomerProfile {
  id                 Int         @id @default(autoincrement())
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int         @unique
  dietaryPreferences DietaryType @default(null)
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  Address            Address[]
}

model DeliveryPartnerProfile {
  id                  Int         @id @default(autoincrement())
  vehicleType         VehicleType
  vehicleNumber       String
  drivingLicense      String
  user                User        @relation(fields: [userId], references: [id])
  backgroundVerified  Boolean     @default(false)
  completedDeliveries Int         @default(0)
  ratings             Float       @default(0.0)
  created_at          DateTime    @default(now())
  userId              Int
}

// Restaurant Owner Profile
model RestaurantProfile {
  id                    Int            @id @default(autoincrement())
  user                  User           @relation(fields: [userId], references: [id])
  // Restaurant Details
  restaurantName        String
  restaurantType        RestaurantType
  cuisineTypes          String[]
  // Legal & Compliance
  fssaiLicenseNumber    String
  gstRegistrationNumber String
  // Business Details
  seatingCapacity       Int?
  operatingHours        Json?
  // Documents
  Document              Document[]
  userId                Int
  created_at            DateTime       @default(now())
  updated_at            DateTime       @updatedAt
}

model Document {
  id                  Int               @id @default(autoincrement())
  restaurant          RestaurantProfile @relation(fields: [restaurantProfileId], references: [id])
  documentType        DocumentType
  fileUrl             String
  uploadedAt          DateTime          @default(now())
  restaurantProfileId Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}
